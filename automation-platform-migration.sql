-- ============================================
-- AUTOMATION PLATFORM DATABASE SETUP
-- Run this in your new Supabase project SQL editor
-- ============================================

-- Create enum for app roles
CREATE TYPE public.app_role AS ENUM ('admin', 'moderator', 'user');

-- ============================================
-- USER PROFILES TABLE
-- ============================================
CREATE TABLE public.user_profiles (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id uuid NOT NULL,
    email text,
    full_name text,
    avatar_url text,
    bio text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Enable RLS
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;

-- Policies for user profiles
CREATE POLICY "Users can view their own profile" ON public.user_profiles
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can update their own profile" ON public.user_profiles
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own profile" ON public.user_profiles
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- ============================================
-- WORKFLOWS TABLE
-- ============================================
CREATE TABLE public.workflows (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    slug text NOT NULL UNIQUE,
    name text NOT NULL,
    path text NOT NULL,
    raw_url text NOT NULL,
    size_bytes integer,
    updated_at timestamp with time zone,
    category text DEFAULT 'General'::text,
    node_count integer DEFAULT 0,
    has_credentials boolean DEFAULT false,
    complexity text DEFAULT 'Easy'::text,
    search_tsv tsvector,
    created_at timestamp with time zone DEFAULT now()
);

-- Enable RLS and create policy
ALTER TABLE public.workflows ENABLE ROW LEVEL SECURITY;

CREATE POLICY "public_read_workflows" ON public.workflows
    FOR SELECT USING (true);

-- ============================================
-- TAGS TABLE
-- ============================================
CREATE TABLE public.tags (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL UNIQUE
);

-- Enable RLS
ALTER TABLE public.tags ENABLE ROW LEVEL SECURITY;

CREATE POLICY "public_read_tags" ON public.tags
    FOR SELECT USING (true);

-- ============================================
-- WORKFLOW_TAGS JUNCTION TABLE
-- ============================================
CREATE TABLE public.workflow_tags (
    workflow_id uuid NOT NULL,
    tag_id integer NOT NULL,
    PRIMARY KEY (workflow_id, tag_id)
);

-- Enable RLS
ALTER TABLE public.workflow_tags ENABLE ROW LEVEL SECURITY;

CREATE POLICY "public_read_workflow_tags" ON public.workflow_tags
    FOR SELECT USING (true);

-- ============================================
-- WORKFLOW_COLLECTIONS TABLE
-- ============================================
CREATE TABLE public.workflow_collections (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id uuid NOT NULL,
    name text NOT NULL,
    description text,
    is_public boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Enable RLS
ALTER TABLE public.workflow_collections ENABLE ROW LEVEL SECURITY;

-- Policies for collections
CREATE POLICY "Users can manage their own collections" ON public.workflow_collections
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can view their own collections" ON public.workflow_collections
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Public collections are viewable by everyone" ON public.workflow_collections
    FOR SELECT USING (is_public = true);

-- ============================================
-- WORKFLOW_COLLECTION_ITEMS TABLE
-- ============================================
CREATE TABLE public.workflow_collection_items (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    collection_id uuid NOT NULL,
    workflow_id uuid NOT NULL,
    added_at timestamp with time zone DEFAULT now()
);

-- Enable RLS
ALTER TABLE public.workflow_collection_items ENABLE ROW LEVEL SECURITY;

-- Policies for collection items
CREATE POLICY "Users can manage items in their own collections" ON public.workflow_collection_items
    FOR ALL USING (EXISTS (
        SELECT 1 FROM workflow_collections 
        WHERE workflow_collections.id = workflow_collection_items.collection_id 
        AND workflow_collections.user_id = auth.uid()
    ));

CREATE POLICY "Users can view items in their own collections" ON public.workflow_collection_items
    FOR SELECT USING (EXISTS (
        SELECT 1 FROM workflow_collections 
        WHERE workflow_collections.id = workflow_collection_items.collection_id 
        AND workflow_collections.user_id = auth.uid()
    ));

CREATE POLICY "Items in public collections are viewable by everyone" ON public.workflow_collection_items
    FOR SELECT USING (EXISTS (
        SELECT 1 FROM workflow_collections 
        WHERE workflow_collections.id = workflow_collection_items.collection_id 
        AND workflow_collections.is_public = true
    ));

-- ============================================
-- WORKFLOW_FAVORITES TABLE
-- ============================================
CREATE TABLE public.workflow_favorites (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id uuid NOT NULL,
    workflow_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    UNIQUE (user_id, workflow_id)
);

-- Enable RLS
ALTER TABLE public.workflow_favorites ENABLE ROW LEVEL SECURITY;

-- Policies for favorites
CREATE POLICY "Users can add their own favorites" ON public.workflow_favorites
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can view their own favorites" ON public.workflow_favorites
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can remove their own favorites" ON public.workflow_favorites
    FOR DELETE USING (auth.uid() = user_id);

-- ============================================
-- WORKFLOW_DOWNLOADS TABLE
-- ============================================
CREATE TABLE public.workflow_downloads (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id uuid NOT NULL,
    workflow_id uuid NOT NULL,
    downloaded_at timestamp with time zone DEFAULT now(),
    user_agent text,
    ip_address inet
);

-- Enable RLS
ALTER TABLE public.workflow_downloads ENABLE ROW LEVEL SECURITY;

-- Policies for downloads
CREATE POLICY "Users can create their own download records" ON public.workflow_downloads
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can view their own downloads" ON public.workflow_downloads
    FOR SELECT USING (auth.uid() = user_id);

-- ============================================
-- CONTACT_MESSAGES TABLE (Optional)
-- ============================================
CREATE TABLE public.contact_messages (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    name text NOT NULL,
    email text NOT NULL,
    subject text NOT NULL,
    message text NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);

-- Enable RLS
ALTER TABLE public.contact_messages ENABLE ROW LEVEL SECURITY;

-- Policies for contact messages
CREATE POLICY "Allow public to create contact messages" ON public.contact_messages
    FOR INSERT WITH CHECK (true);

-- ============================================
-- SUBSCRIBERS TABLE (Optional Newsletter)
-- ============================================
CREATE TABLE public.subscribers (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    email text NOT NULL,
    status text NOT NULL DEFAULT 'subscribed'::text,
    created_at timestamp with time zone DEFAULT now()
);

-- Enable RLS
ALTER TABLE public.subscribers ENABLE ROW LEVEL SECURITY;

-- Policies for subscribers
CREATE POLICY "Allow public to subscribe to newsletter" ON public.subscribers
    FOR INSERT WITH CHECK (true);

-- ============================================
-- UTILITY FUNCTIONS
-- ============================================

-- Function to update updated_at column
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;

-- Function to handle new user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.user_profiles (user_id, email, full_name)
    VALUES (
        NEW.id,
        NEW.email,
        COALESCE(NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'name')
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;

-- Function to upsert workflows (for data sync)
CREATE OR REPLACE FUNCTION public.upsert_workflow(
    p_slug text,
    p_name text,
    p_path text,
    p_raw_url text,
    p_size integer,
    p_updated timestamp with time zone,
    p_category text,
    p_node_count integer,
    p_has_credentials boolean,
    p_complexity text,
    p_tags text[]
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    w_id uuid;
    t text;
    t_id int;
BEGIN
    -- Delete existing workflow tags if workflow exists
    IF EXISTS(SELECT 1 FROM workflows WHERE slug = p_slug) THEN
        DELETE FROM workflow_tags WHERE workflow_id = (SELECT id FROM workflows WHERE slug = p_slug);
    END IF;

    -- Insert or update workflow
    INSERT INTO workflows(slug, name, path, raw_url, size_bytes, updated_at, category, node_count, has_credentials, complexity, search_tsv)
    VALUES(
        p_slug, p_name, p_path, p_raw_url, p_size, p_updated, 
        COALESCE(p_category, 'General'), p_node_count, p_has_credentials, p_complexity,
        setweight(to_tsvector('simple', COALESCE(p_name, '')), 'A') ||
        setweight(to_tsvector('simple', COALESCE(p_category, '')), 'B')
    )
    ON CONFLICT(slug) DO UPDATE SET
        name = excluded.name,
        path = excluded.path,
        raw_url = excluded.raw_url,
        size_bytes = excluded.size_bytes,
        updated_at = excluded.updated_at,
        category = excluded.category,
        node_count = excluded.node_count,
        has_credentials = excluded.has_credentials,
        complexity = excluded.complexity,
        search_tsv = excluded.search_tsv
    RETURNING id INTO w_id;

    -- Get workflow id if not returned
    IF w_id IS NULL THEN
        SELECT id INTO w_id FROM workflows WHERE slug = p_slug;
    END IF;

    -- Insert tags
    IF p_tags IS NOT NULL THEN
        FOREACH t IN ARRAY p_tags LOOP
            IF t IS NOT NULL AND trim(t) <> '' THEN
                INSERT INTO tags(name) VALUES (lower(trim(t))) ON CONFLICT(name) DO NOTHING;
                SELECT id INTO t_id FROM tags WHERE name = lower(trim(t));
                INSERT INTO workflow_tags(workflow_id, tag_id) VALUES (w_id, t_id) ON CONFLICT DO NOTHING;
            END IF;
        END LOOP;
    END IF;

    RETURN w_id;
END
$$;

-- ============================================
-- TRIGGERS
-- ============================================

-- Trigger for updating updated_at on user_profiles
CREATE TRIGGER update_user_profiles_updated_at
    BEFORE UPDATE ON public.user_profiles
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at_column();

-- Trigger for updating updated_at on workflow_collections
CREATE TRIGGER update_workflow_collections_updated_at
    BEFORE UPDATE ON public.workflow_collections
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at_column();

-- Trigger for creating user profile on signup
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_new_user();

-- ============================================
-- INDEXES FOR PERFORMANCE
-- ============================================

-- Index for workflow search
CREATE INDEX idx_workflows_search_tsv ON public.workflows USING gin(search_tsv);

-- Indexes for common queries
CREATE INDEX idx_workflows_category ON public.workflows(category);
CREATE INDEX idx_workflows_complexity ON public.workflows(complexity);
CREATE INDEX idx_workflows_node_count ON public.workflows(node_count);
CREATE INDEX idx_workflows_has_credentials ON public.workflows(has_credentials);

-- Indexes for user-related tables
CREATE INDEX idx_user_profiles_user_id ON public.user_profiles(user_id);
CREATE INDEX idx_workflow_favorites_user_id ON public.workflow_favorites(user_id);
CREATE INDEX idx_workflow_downloads_user_id ON public.workflow_downloads(user_id);
CREATE INDEX idx_workflow_collections_user_id ON public.workflow_collections(user_id);

-- ============================================
-- SETUP COMPLETE
-- ============================================

-- Insert sample data (optional)
INSERT INTO public.workflows (slug, name, path, raw_url, category, node_count, has_credentials, complexity)
VALUES 
    ('sample-workflow-1', 'Sample Email Automation', '/workflows/email.json', 'https://raw.githubusercontent.com/example/workflow.json', 'Email', 5, false, 'Easy'),
    ('sample-workflow-2', 'Advanced Data Processing', '/workflows/data.json', 'https://raw.githubusercontent.com/example/data.json', 'Data Processing', 15, true, 'Advanced')
ON CONFLICT (slug) DO NOTHING;

-- Insert sample tags
INSERT INTO public.tags (name) VALUES ('email'), ('automation'), ('data-processing'), ('crm') ON CONFLICT (name) DO NOTHING;